var assets = []string{"8d51e5d75ec9adf8080213e0f310e78b0063f50d",
	"b6cb731f90cefebbd4f9cedd0cf56bd1e21967f4",
	"9a9db8a30a80951ec792effb9731af79781177c2",
	"7ba002bc1dbc918d555f1d466acda1d540332e28",
	"378b147c06a7737a6a712d7bdcfa0d5bc3ca4d53",
	"5e529a73fd7dad3b1fed587f8874c0855cd634c5"}

func TestRedis(t *testing.T) {
	sb := sc.NewScriptBuilder()
	scriptHash := helper.HexToBytes("dad9fbc914203b99c1dfbaad0d98738d4e19924d") //
	address := "AGrgyoJR4FKeWCNGRvduSakaDzhZ9qikr9"
	lyh, _ := helper.AddressToScriptHash(address)
	log.Printf("lyh: %s", helper.BytesToHex(lyh.Bytes()))

	for _, asset := range assets {
		cp1 := sc.ContractParameter{
			Type:  sc.ByteArray,
			Value: lyh.Bytes(),
		}

		cp2 := sc.ContractParameter{
			Type:  sc.ByteArray,
			Value: helper.HexToBytes(asset), //
		}

		args := []sc.ContractParameter{cp1, cp2}
		sb.MakeInvocationScript(scriptHash, "getStakingAmount", args)
	}

	for _, asset := range assets {
		cp2 := sc.ContractParameter{
			Type:  sc.ByteArray,
			Value: helper.HexToBytes(asset), //
		}
		args :=  []sc.ContractParameter{cp2}
		sb.MakeInvocationScript(scriptHash, "getCurrentTotalAmount", args)
	}

	script := sb.ToArray()

	log.Printf("script: %s", helper.BytesToHex(script))

	//client := NewClient("http://seed10.ngd.network:11332")
	client := NewClient("https://wallet.ngd.network:10331")
	checkWitnessHashes := "0000000000000000000000000000000000000000"
	response := client.InvokeScript(helper.BytesToHex(script), checkWitnessHashes)
	if response.HasError() || response.Result.State == "FAULT" {
		log.Printf("invoke script error: %s", response.Error.Message)
	}

	if len(response.Result.Stack) > 0 {
		var amount *big.Int
		var success bool
		for i, stack := range response.Result.Stack {
			if stack.Type == "ByteArray" {
				amount = helper.BigIntFromNeoBytes(helper.HexToBytes(stack.Value))
			} else {
				amount, success = new(big.Int).SetString(stack.Value, 10)
				assert.Equal(t, true, success)
			}
			if i < 5 {
				log.Printf("staking amount: %s", amount.String())
			} else {
				log.Printf("total amount: %s", amount.String())
			}
		}
	} else {
		log.Printf("stack empty")
	}
}
